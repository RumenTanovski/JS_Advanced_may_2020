//     1. Print an Array with a Given Delimiter
function printArray(arr) {
    const delimiter = arr.pop();
    console.log(arr.join(delimiter));
}

/*printArray(['One', 
'Two', 
'Three', 
'Four', 
'Five', 
'-']);
*/


//    2. Print Every N-th Element from an Array 
function printNthElement(arrStrings) {
    const step = Number(arrStrings.pop());

    for (let i = 0; i < arrStrings.length; i += step) {
        console.log(arrStrings[i]);
    }
}

// printNthElement(['5', 
// '20', 
// '31', 
// '4', 
// '20', 
// '2']);


// 3. Add and Remove Elements 

function addRemoveElement(arrComand) {
    const arrNumber = [];

    for (let i = 0; i <= arrComand.length; i++) {
        if (arrComand[i] === 'add') {
            arrNumber.push(i === 0 ? 1 : i + 1);
        }

        if (arrComand[i] === 'remove') {
            if (arrNumber.length > 0) {
                arrNumber.pop();
            }
        }
    }
    console.log(arrNumber.length !== 0 ? arrNumber.join('\n') : 'Empty');
}

// addRemoveElement(['add', 
// 'add', 
// 'remove', 
// 'add', 
// 'add']);


//    4. Rotate Array

function rotateArr(arr) {
    const numRotation = arr.pop();

    for (let i = 1; i <= numRotation; i++) {
        arr.unshift(arr.pop());
    }

    console.log(arr.join(' '));
}

// rotateArr(['Banana', 
// 'Orange', 
// 'Coconut', 
// 'Apple', 
// '15']);


//    5. Extract Increasing Subsequence from Array
function extractIncreasing(arr) {
    let result = [arr.shift()];

    arr.filter(number => {
        let biggest = Math.max(...result);
        number >= biggest ? result.push(number) : 'pass';
    })
    console.log(result.join('\n'));
}

// extractIncreasing([1,
//     3,
//     8,
//     4,
//     10,
//     12,
//     3,
//     2,
//     24
// ]);


//6. Sort an Array by 2 Criteria

function sortArray2Criterii(arr) {

    arr.sort((a, b) => a.length - b.length || a.toLowerCase().localeCompare(b.toLowerCase()));

    console.log(arr.join('\n'));

}

// sortArray2Criterii(['alpha', 
// 'beta', 
// 'gamma']);


// 7. Magic Matrices
function magicMatrices(matrix) {
    const sum = matrix[0].reduce((a, b) => a + b, 0);
    let arrCurr = 0;
    let result = true;


    for (let i = 1; i < matrix[0].length; i++) {
        arrCur = matrix[i].reduce((a, b) => a + b, 0);

        if (sum !== arrCur) {
            result = false;
            break;
        }
    }

    for (let i = 0; i < matrix[0].length; i++) {
        arrCur= 0;
        for (let j = 0; j < matrix.length; j++) {
            arrCur+=matrix[j][i];
        }

        if (sum !== arrCur) {
            result = false;
            break;
        }
    }
    console.log(result);
}

magicMatrices([
    [4, 5, 6],
    [6, 5, 4],
    [5, 5, 5]
]);

//

