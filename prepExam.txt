function solve() {
    document.querySelector('button#add').addEventListener('click', addToOpen);
    const open = document.querySelectorAll('section')[1].querySelector('div:nth-of-type(2)');
    const inProgres = document.querySelectorAll('section')[2].querySelector('div:nth-of-type(2)');
    const complete = document.querySelectorAll('section')[3].querySelector('div:nth-of-type(2)');

    function addToOpen(e) {
        e.preventDefault();

        const task = document.querySelector('#task').value;
        const description = document.querySelector('#description').value;
        const date = document.querySelector('#date').value;

        if (task === '' || description === '' || date === '') {
            return;
        }

        const startBtn = el('button', 'Start', {
            className: 'green'
        });
        const deleteBtn = el('button', 'Delete', {
            className: 'red'
        });

        //закачат се и тук listener
        startBtn.addEventListener('click', addInProgres);

        deleteBtn.addEventListener('click', () => {
            open.removeChild(article);
        });

        const article =
            el('article', [
                el('h3', task),
                el('p', `Description: ${description}`),
                el('p', `Due Date: ${date}`),
                el('div', [startBtn, deleteBtn], {
                    className: 'flex'
                })
            ]);
        //накрая се вързва към DOM
        open.appendChild(article);
    }

    function addInProgres(e) {

        e.preventDefault();

        const articleCurrent = e.target.parentNode.parentNode;

        open.removeChild(articleCurrent);

        const div = articleCurrent.querySelector('div');
        articleCurrent.removeChild(div);

        const deleteBtn = el('button', 'Delete', {
            className: 'red'
        });

        const finishBtn = el('button', 'Finish', {
            className: 'orange'
        });

        deleteBtn.addEventListener('click', () => {
            inProgres.removeChild(articleCurrent);
        });

        finishBtn.addEventListener('click', addComplete);

        const divNew = el('div', [deleteBtn, finishBtn], {
            className: 'flex'
        });

        articleCurrent.appendChild(divNew);

        inProgres.appendChild(articleCurrent);

    };

    function addComplete(e) {
        e.preventDefault();
        const articleCurrent = e.target.parentNode.parentNode;

        inProgres.removeChild(articleCurrent);

        const div = articleCurrent.querySelector('div');
        articleCurrent.removeChild(div);

        complete.appendChild(articleCurrent);
    }

    
    //type=tag, content=text/tag, attributes

    function el(type, content, attributes) {
        const result = document.createElement(type);

        if (attributes !== undefined) {
            Object.assign(result, attributes);
        }

        if (Array.isArray(content)) {
            content.forEach(append);
        } else {
            append(content);
        }

        function append(node) {
            if (typeof node === 'string') {
                node = document.createTextNode(node);
            }
            result.appendChild(node);
        }
        return result;
    }
}





function solveClasses() {

    class Article {
        constructor(title, content) {
            this.title = title;
            this.content = content;
        }
        toString() {
            return [`Title: ${this.title}`,
                `Content: ${this.content}`
            ].join('\n');
        }
    }

    class ShortReports extends Article {
        constructor(title, content, originalResearches) {
            if (content.length >= 150) {
                throw new Error('Short reports content should be less then 150 symbols.');
            } else if (originalResearches.hasOwnProperty('title') == false ||
                originalResearches.hasOwnProperty('author') == false) {
                throw new Error('The original research should have author and title.');
            }
            super(title, content);
            this.originalResearches = originalResearches;
            this.comments = [];
        }

        addComment(comment) {
            this.comments.push(comment);
            return 'The comment is added.';
        }

        toString() {
            const result = [super.toString(),
                `Original Research: ${this.originalResearches.title} by ${this.originalResearches.author}`
            ];

            if (this.comments.length > 0) {
                result.push('Comments:');
                this.comments.forEach(c => result.push(c));
            }
            return result.join('\n');
        }
    }


    class BookReview extends Article {
        constructor(title, content, book) {
            super(title, content);
            this.book = book;
            this.clients = [];
        }

        addClient(clientName, orderDescription) {
            if (this.clients.find(c => c.clientName == clientName) !== undefined) {
                throw new Error('This client has already ordered this review.');
            } else {
                this.clients.push({
                    clientName,
                    orderDescription
                });

                return `${clientName} has ordered a review for ${ this.book.name }`;
            }
        }

        toString() {
            const result = [super.toString(),
                `Book: ${this.book.name}`
            ];
            if (this.clients.length > 0) {
                result.push('Orders:');
                this.clients.forEach(c => result.push(`${ c.clientName } - ${ c.orderDescription }.`));
            }
            return result.join('\n');

        }
    }
    return {
        Article,
        ShortReports,
        BookReview
    };
}

let classes = solveClasses();
let lorem = new classes.Article("Lorem", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce non tortor finibus, facilisis mauris vel…");
console.log(lorem.toString()); 

let short = new classes.ShortReports("SpaceX and Javascript", "Yes, its damn true.SpaceX in its recent launch Dragon 2 Flight has used a technology based on Chromium and Javascript. What are your views on this ?", { title: "Dragon 2", author: "wikipedia.org" });
console.log(short.addComment("Thank god they didn't use java."));
short.addComment("In the end JavaScripts features are executed in C++ — the underlying language.")
console.log(short.toString()); 

class Bank {
    constructor(bankName) {
        this._bankName = bankName;
        this.allCustomers = [];
    }

    newCustomer(customer) {
        const customerCurrent = this.allCustomers.find(c => c.personalId === customer.personalId);
        if (customerCurrent === undefined) {
            customer.totalMoney = 0;
            customer.transactions = [];
            
            this.allCustomers.push(customer);
            return customer;
        } else {
            throw new Error(`${customer.firstName} ${customer.lastName} is already our customer!`);
        }
    }

    depositMoney(personalId, amount) {
        const customer = this.allCustomers.find(c => c.personalId === personalId);
        if (customer === undefined) {
            throw new Error('We have no customer with this ID!');
        }

        const transaction = {
            'action': 'd',
            'amount': amount
        };

        customer.transactions.push(transaction);
        customer.totalMoney += amount;
        return `${customer.totalMoney}$`;
    }

    withdrawMoney(personalId, amount) {
        const customer = this.allCustomers.find(c => c.personalId === personalId);
        if (customer === undefined) {
            throw new Error('We have no customer with this ID!');
        } else if (customer.totalMoney < amount) {
            throw new Error(`${customer.firstName} ${customer.lastName} does not have enough money to withdraw that amount!`);
        }

        const transaction = {
            'action': 'w',
            'amount': amount
        };

        customer.transactions.push(transaction);
        customer.totalMoney -= amount;
        return `${customer.totalMoney}$`;
    }

    customerInfo(personalId) {
        const customer = this.allCustomers.find(c => c.personalId === personalId);
        if (customer === undefined) {
            throw new Error('We have no customer with this ID!');
        }

        const result = [
            `Bank name: ${this._bankName}`,
            `Customer name: ${customer.firstName} ${customer.lastName}`,
            `Customer ID: ${customer.personalId}`,
            `Total Money: ${customer.totalMoney}$`,
            'Transactions:'
        ];

        for (let i = customer.transactions.length - 1; i >= 0; i--) {
            const transaction = customer.transactions[i];
            result.push(`${i+1}. ${customer.firstName} ${customer.lastName} ${transaction.action === 'd'? 'made deposit of': 'withdrew'} ${transaction.amount}$!`);
        }

        return result.join('\n');

    }
}



let bank = new Bank("SoftUni Bank");

console.log(bank.newCustomer({
    firstName: "Svetlin",
    lastName: "Nakov",
    personalId: 6233267
}));
console.log(bank.newCustomer({
    firstName: "Mihaela",
    lastName: "Mileva",
    personalId: 4151596
}));

bank.depositMoney(6233267, 250);
console.log(bank.depositMoney(6233267, 250));
bank.depositMoney(4151596, 555);

console.log(bank.withdrawMoney(6233267, 125));
